// Generated by gencpp from file mobile_control/base_arm_pose.msg
// DO NOT EDIT!


#ifndef MOBILE_CONTROL_MESSAGE_BASE_ARM_POSE_H
#define MOBILE_CONTROL_MESSAGE_BASE_ARM_POSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobile_control
{
template <class ContainerAllocator>
struct base_arm_pose_
{
  typedef base_arm_pose_<ContainerAllocator> Type;

  base_arm_pose_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , qx(0.0)
    , qy(0.0)
    , qz(0.0)
    , qw(0.0)  {
    }
  base_arm_pose_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , qx(0.0)
    , qy(0.0)
    , qz(0.0)
    , qw(0.0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _qx_type;
  _qx_type qx;

   typedef double _qy_type;
  _qy_type qy;

   typedef double _qz_type;
  _qz_type qz;

   typedef double _qw_type;
  _qw_type qw;





  typedef boost::shared_ptr< ::mobile_control::base_arm_pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobile_control::base_arm_pose_<ContainerAllocator> const> ConstPtr;

}; // struct base_arm_pose_

typedef ::mobile_control::base_arm_pose_<std::allocator<void> > base_arm_pose;

typedef boost::shared_ptr< ::mobile_control::base_arm_pose > base_arm_posePtr;
typedef boost::shared_ptr< ::mobile_control::base_arm_pose const> base_arm_poseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobile_control::base_arm_pose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobile_control::base_arm_pose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobile_control::base_arm_pose_<ContainerAllocator1> & lhs, const ::mobile_control::base_arm_pose_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.qx == rhs.qx &&
    lhs.qy == rhs.qy &&
    lhs.qz == rhs.qz &&
    lhs.qw == rhs.qw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobile_control::base_arm_pose_<ContainerAllocator1> & lhs, const ::mobile_control::base_arm_pose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobile_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mobile_control::base_arm_pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobile_control::base_arm_pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobile_control::base_arm_pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobile_control::base_arm_pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobile_control::base_arm_pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobile_control::base_arm_pose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobile_control::base_arm_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "35a0d0e30ab944cc75b126eac51f0ba6";
  }

  static const char* value(const ::mobile_control::base_arm_pose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x35a0d0e30ab944ccULL;
  static const uint64_t static_value2 = 0x75b126eac51f0ba6ULL;
};

template<class ContainerAllocator>
struct DataType< ::mobile_control::base_arm_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobile_control/base_arm_pose";
  }

  static const char* value(const ::mobile_control::base_arm_pose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobile_control::base_arm_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 qx\n"
"float64 qy\n"
"float64 qz\n"
"float64 qw\n"
"\n"
;
  }

  static const char* value(const ::mobile_control::base_arm_pose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobile_control::base_arm_pose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.qx);
      stream.next(m.qy);
      stream.next(m.qz);
      stream.next(m.qw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct base_arm_pose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobile_control::base_arm_pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobile_control::base_arm_pose_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "qx: ";
    Printer<double>::stream(s, indent + "  ", v.qx);
    s << indent << "qy: ";
    Printer<double>::stream(s, indent + "  ", v.qy);
    s << indent << "qz: ";
    Printer<double>::stream(s, indent + "  ", v.qz);
    s << indent << "qw: ";
    Printer<double>::stream(s, indent + "  ", v.qw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILE_CONTROL_MESSAGE_BASE_ARM_POSE_H
