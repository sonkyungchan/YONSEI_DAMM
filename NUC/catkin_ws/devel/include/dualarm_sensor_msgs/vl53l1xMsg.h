// Generated by gencpp from file dualarm_sensor_msgs/vl53l1xMsg.msg
// DO NOT EDIT!


#ifndef DUALARM_SENSOR_MSGS_MESSAGE_VL53L1XMSG_H
#define DUALARM_SENSOR_MSGS_MESSAGE_VL53L1XMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dualarm_sensor_msgs
{
template <class ContainerAllocator>
struct vl53l1xMsg_
{
  typedef vl53l1xMsg_<ContainerAllocator> Type;

  vl53l1xMsg_()
    : laser()  {
      laser.assign(0);
  }
  vl53l1xMsg_(const ContainerAllocator& _alloc)
    : laser()  {
  (void)_alloc;
      laser.assign(0);
  }



   typedef boost::array<uint16_t, 3>  _laser_type;
  _laser_type laser;





  typedef boost::shared_ptr< ::dualarm_sensor_msgs::vl53l1xMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dualarm_sensor_msgs::vl53l1xMsg_<ContainerAllocator> const> ConstPtr;

}; // struct vl53l1xMsg_

typedef ::dualarm_sensor_msgs::vl53l1xMsg_<std::allocator<void> > vl53l1xMsg;

typedef boost::shared_ptr< ::dualarm_sensor_msgs::vl53l1xMsg > vl53l1xMsgPtr;
typedef boost::shared_ptr< ::dualarm_sensor_msgs::vl53l1xMsg const> vl53l1xMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dualarm_sensor_msgs::vl53l1xMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dualarm_sensor_msgs::vl53l1xMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dualarm_sensor_msgs::vl53l1xMsg_<ContainerAllocator1> & lhs, const ::dualarm_sensor_msgs::vl53l1xMsg_<ContainerAllocator2> & rhs)
{
  return lhs.laser == rhs.laser;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dualarm_sensor_msgs::vl53l1xMsg_<ContainerAllocator1> & lhs, const ::dualarm_sensor_msgs::vl53l1xMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dualarm_sensor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dualarm_sensor_msgs::vl53l1xMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dualarm_sensor_msgs::vl53l1xMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dualarm_sensor_msgs::vl53l1xMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dualarm_sensor_msgs::vl53l1xMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dualarm_sensor_msgs::vl53l1xMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dualarm_sensor_msgs::vl53l1xMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dualarm_sensor_msgs::vl53l1xMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c7f412389a37f112bb77ded6f7ffeb01";
  }

  static const char* value(const ::dualarm_sensor_msgs::vl53l1xMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc7f412389a37f112ULL;
  static const uint64_t static_value2 = 0xbb77ded6f7ffeb01ULL;
};

template<class ContainerAllocator>
struct DataType< ::dualarm_sensor_msgs::vl53l1xMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dualarm_sensor_msgs/vl53l1xMsg";
  }

  static const char* value(const ::dualarm_sensor_msgs::vl53l1xMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dualarm_sensor_msgs::vl53l1xMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16[3] laser\n"
;
  }

  static const char* value(const ::dualarm_sensor_msgs::vl53l1xMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dualarm_sensor_msgs::vl53l1xMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.laser);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vl53l1xMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dualarm_sensor_msgs::vl53l1xMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dualarm_sensor_msgs::vl53l1xMsg_<ContainerAllocator>& v)
  {
    s << indent << "laser[]" << std::endl;
    for (size_t i = 0; i < v.laser.size(); ++i)
    {
      s << indent << "  laser[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.laser[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUALARM_SENSOR_MSGS_MESSAGE_VL53L1XMSG_H
