// Generated by gencpp from file msgpkg/realVal.msg
// DO NOT EDIT!


#ifndef MSGPKG_MESSAGE_REALVAL_H
#define MSGPKG_MESSAGE_REALVAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msgpkg
{
template <class ContainerAllocator>
struct realVal_
{
  typedef realVal_<ContainerAllocator> Type;

  realVal_()
    : realPos(0)
    , motPos(0)
    , command(0.0)
    , adc1(0)
    , adc2(0)
    , fss(0)
    , par1(0.0)
    , par2(0.0)
    , par3(0.0)  {
    }
  realVal_(const ContainerAllocator& _alloc)
    : realPos(0)
    , motPos(0)
    , command(0.0)
    , adc1(0)
    , adc2(0)
    , fss(0)
    , par1(0.0)
    , par2(0.0)
    , par3(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _realPos_type;
  _realPos_type realPos;

   typedef int64_t _motPos_type;
  _motPos_type motPos;

   typedef double _command_type;
  _command_type command;

   typedef int64_t _adc1_type;
  _adc1_type adc1;

   typedef int64_t _adc2_type;
  _adc2_type adc2;

   typedef int64_t _fss_type;
  _fss_type fss;

   typedef double _par1_type;
  _par1_type par1;

   typedef double _par2_type;
  _par2_type par2;

   typedef double _par3_type;
  _par3_type par3;





  typedef boost::shared_ptr< ::msgpkg::realVal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgpkg::realVal_<ContainerAllocator> const> ConstPtr;

}; // struct realVal_

typedef ::msgpkg::realVal_<std::allocator<void> > realVal;

typedef boost::shared_ptr< ::msgpkg::realVal > realValPtr;
typedef boost::shared_ptr< ::msgpkg::realVal const> realValConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgpkg::realVal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgpkg::realVal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgpkg::realVal_<ContainerAllocator1> & lhs, const ::msgpkg::realVal_<ContainerAllocator2> & rhs)
{
  return lhs.realPos == rhs.realPos &&
    lhs.motPos == rhs.motPos &&
    lhs.command == rhs.command &&
    lhs.adc1 == rhs.adc1 &&
    lhs.adc2 == rhs.adc2 &&
    lhs.fss == rhs.fss &&
    lhs.par1 == rhs.par1 &&
    lhs.par2 == rhs.par2 &&
    lhs.par3 == rhs.par3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgpkg::realVal_<ContainerAllocator1> & lhs, const ::msgpkg::realVal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgpkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msgpkg::realVal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgpkg::realVal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgpkg::realVal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgpkg::realVal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgpkg::realVal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgpkg::realVal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgpkg::realVal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "759db5aada8af296ae03ce0c58f9ddd5";
  }

  static const char* value(const ::msgpkg::realVal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x759db5aada8af296ULL;
  static const uint64_t static_value2 = 0xae03ce0c58f9ddd5ULL;
};

template<class ContainerAllocator>
struct DataType< ::msgpkg::realVal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgpkg/realVal";
  }

  static const char* value(const ::msgpkg::realVal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgpkg::realVal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 realPos\n"
"int64 motPos\n"
"float64 command\n"
"int64 adc1\n"
"int64 adc2\n"
"int64 fss\n"
"float64 par1\n"
"float64 par2\n"
"float64 par3\n"
;
  }

  static const char* value(const ::msgpkg::realVal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgpkg::realVal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.realPos);
      stream.next(m.motPos);
      stream.next(m.command);
      stream.next(m.adc1);
      stream.next(m.adc2);
      stream.next(m.fss);
      stream.next(m.par1);
      stream.next(m.par2);
      stream.next(m.par3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct realVal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgpkg::realVal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgpkg::realVal_<ContainerAllocator>& v)
  {
    s << indent << "realPos: ";
    Printer<int64_t>::stream(s, indent + "  ", v.realPos);
    s << indent << "motPos: ";
    Printer<int64_t>::stream(s, indent + "  ", v.motPos);
    s << indent << "command: ";
    Printer<double>::stream(s, indent + "  ", v.command);
    s << indent << "adc1: ";
    Printer<int64_t>::stream(s, indent + "  ", v.adc1);
    s << indent << "adc2: ";
    Printer<int64_t>::stream(s, indent + "  ", v.adc2);
    s << indent << "fss: ";
    Printer<int64_t>::stream(s, indent + "  ", v.fss);
    s << indent << "par1: ";
    Printer<double>::stream(s, indent + "  ", v.par1);
    s << indent << "par2: ";
    Printer<double>::stream(s, indent + "  ", v.par2);
    s << indent << "par3: ";
    Printer<double>::stream(s, indent + "  ", v.par3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGPKG_MESSAGE_REALVAL_H
