// Generated by gencpp from file msgpkg/gripper_dis.msg
// DO NOT EDIT!


#ifndef MSGPKG_MESSAGE_GRIPPER_DIS_H
#define MSGPKG_MESSAGE_GRIPPER_DIS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msgpkg
{
template <class ContainerAllocator>
struct gripper_dis_
{
  typedef gripper_dis_<ContainerAllocator> Type;

  gripper_dis_()
    : gripper_dis(0.0)  {
    }
  gripper_dis_(const ContainerAllocator& _alloc)
    : gripper_dis(0.0)  {
  (void)_alloc;
    }



   typedef double _gripper_dis_type;
  _gripper_dis_type gripper_dis;





  typedef boost::shared_ptr< ::msgpkg::gripper_dis_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgpkg::gripper_dis_<ContainerAllocator> const> ConstPtr;

}; // struct gripper_dis_

typedef ::msgpkg::gripper_dis_<std::allocator<void> > gripper_dis;

typedef boost::shared_ptr< ::msgpkg::gripper_dis > gripper_disPtr;
typedef boost::shared_ptr< ::msgpkg::gripper_dis const> gripper_disConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgpkg::gripper_dis_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgpkg::gripper_dis_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgpkg::gripper_dis_<ContainerAllocator1> & lhs, const ::msgpkg::gripper_dis_<ContainerAllocator2> & rhs)
{
  return lhs.gripper_dis == rhs.gripper_dis;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgpkg::gripper_dis_<ContainerAllocator1> & lhs, const ::msgpkg::gripper_dis_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgpkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msgpkg::gripper_dis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgpkg::gripper_dis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgpkg::gripper_dis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgpkg::gripper_dis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgpkg::gripper_dis_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgpkg::gripper_dis_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgpkg::gripper_dis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fe37c961195d22e6ba99189474288c9c";
  }

  static const char* value(const ::msgpkg::gripper_dis_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfe37c961195d22e6ULL;
  static const uint64_t static_value2 = 0xba99189474288c9cULL;
};

template<class ContainerAllocator>
struct DataType< ::msgpkg::gripper_dis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgpkg/gripper_dis";
  }

  static const char* value(const ::msgpkg::gripper_dis_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgpkg::gripper_dis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 gripper_dis\n"
;
  }

  static const char* value(const ::msgpkg::gripper_dis_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgpkg::gripper_dis_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gripper_dis);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gripper_dis_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgpkg::gripper_dis_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgpkg::gripper_dis_<ContainerAllocator>& v)
  {
    s << indent << "gripper_dis: ";
    Printer<double>::stream(s, indent + "  ", v.gripper_dis);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGPKG_MESSAGE_GRIPPER_DIS_H
