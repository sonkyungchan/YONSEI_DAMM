// Generated by gencpp from file msgpkg/contact_force.msg
// DO NOT EDIT!


#ifndef MSGPKG_MESSAGE_CONTACT_FORCE_H
#define MSGPKG_MESSAGE_CONTACT_FORCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msgpkg
{
template <class ContainerAllocator>
struct contact_force_
{
  typedef contact_force_<ContainerAllocator> Type;

  contact_force_()
    : Data(0.0)  {
    }
  contact_force_(const ContainerAllocator& _alloc)
    : Data(0.0)  {
  (void)_alloc;
    }



   typedef float _Data_type;
  _Data_type Data;





  typedef boost::shared_ptr< ::msgpkg::contact_force_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgpkg::contact_force_<ContainerAllocator> const> ConstPtr;

}; // struct contact_force_

typedef ::msgpkg::contact_force_<std::allocator<void> > contact_force;

typedef boost::shared_ptr< ::msgpkg::contact_force > contact_forcePtr;
typedef boost::shared_ptr< ::msgpkg::contact_force const> contact_forceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgpkg::contact_force_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgpkg::contact_force_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgpkg::contact_force_<ContainerAllocator1> & lhs, const ::msgpkg::contact_force_<ContainerAllocator2> & rhs)
{
  return lhs.Data == rhs.Data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgpkg::contact_force_<ContainerAllocator1> & lhs, const ::msgpkg::contact_force_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgpkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msgpkg::contact_force_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgpkg::contact_force_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgpkg::contact_force_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgpkg::contact_force_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgpkg::contact_force_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgpkg::contact_force_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgpkg::contact_force_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cdf0857c334d04631fd6716a8c4c2496";
  }

  static const char* value(const ::msgpkg::contact_force_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcdf0857c334d0463ULL;
  static const uint64_t static_value2 = 0x1fd6716a8c4c2496ULL;
};

template<class ContainerAllocator>
struct DataType< ::msgpkg::contact_force_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgpkg/contact_force";
  }

  static const char* value(const ::msgpkg::contact_force_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgpkg::contact_force_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 Data\n"
;
  }

  static const char* value(const ::msgpkg::contact_force_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgpkg::contact_force_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct contact_force_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgpkg::contact_force_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgpkg::contact_force_<ContainerAllocator>& v)
  {
    s << indent << "Data: ";
    Printer<float>::stream(s, indent + "  ", v.Data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGPKG_MESSAGE_CONTACT_FORCE_H
