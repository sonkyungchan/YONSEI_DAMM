// Generated by gencpp from file msgpkg/realVal3.msg
// DO NOT EDIT!


#ifndef MSGPKG_MESSAGE_REALVAL3_H
#define MSGPKG_MESSAGE_REALVAL3_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msgpkg
{
template <class ContainerAllocator>
struct realVal3_
{
  typedef realVal3_<ContainerAllocator> Type;

  realVal3_()
    : realPos1(0)
    , realPos2(0)
    , adc1(0)
    , adc2(0)
    , adc3(0)
    , adc4(0)
    , command1(0.0)
    , command2(0.0)  {
    }
  realVal3_(const ContainerAllocator& _alloc)
    : realPos1(0)
    , realPos2(0)
    , adc1(0)
    , adc2(0)
    , adc3(0)
    , adc4(0)
    , command1(0.0)
    , command2(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _realPos1_type;
  _realPos1_type realPos1;

   typedef int64_t _realPos2_type;
  _realPos2_type realPos2;

   typedef int64_t _adc1_type;
  _adc1_type adc1;

   typedef int64_t _adc2_type;
  _adc2_type adc2;

   typedef int64_t _adc3_type;
  _adc3_type adc3;

   typedef int64_t _adc4_type;
  _adc4_type adc4;

   typedef double _command1_type;
  _command1_type command1;

   typedef double _command2_type;
  _command2_type command2;





  typedef boost::shared_ptr< ::msgpkg::realVal3_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgpkg::realVal3_<ContainerAllocator> const> ConstPtr;

}; // struct realVal3_

typedef ::msgpkg::realVal3_<std::allocator<void> > realVal3;

typedef boost::shared_ptr< ::msgpkg::realVal3 > realVal3Ptr;
typedef boost::shared_ptr< ::msgpkg::realVal3 const> realVal3ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgpkg::realVal3_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgpkg::realVal3_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgpkg::realVal3_<ContainerAllocator1> & lhs, const ::msgpkg::realVal3_<ContainerAllocator2> & rhs)
{
  return lhs.realPos1 == rhs.realPos1 &&
    lhs.realPos2 == rhs.realPos2 &&
    lhs.adc1 == rhs.adc1 &&
    lhs.adc2 == rhs.adc2 &&
    lhs.adc3 == rhs.adc3 &&
    lhs.adc4 == rhs.adc4 &&
    lhs.command1 == rhs.command1 &&
    lhs.command2 == rhs.command2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgpkg::realVal3_<ContainerAllocator1> & lhs, const ::msgpkg::realVal3_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgpkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msgpkg::realVal3_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgpkg::realVal3_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgpkg::realVal3_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgpkg::realVal3_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgpkg::realVal3_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgpkg::realVal3_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgpkg::realVal3_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a1e673a40df61e466a877827a9e4183";
  }

  static const char* value(const ::msgpkg::realVal3_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a1e673a40df61e4ULL;
  static const uint64_t static_value2 = 0x66a877827a9e4183ULL;
};

template<class ContainerAllocator>
struct DataType< ::msgpkg::realVal3_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgpkg/realVal3";
  }

  static const char* value(const ::msgpkg::realVal3_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgpkg::realVal3_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 realPos1\n"
"int64 realPos2\n"
"int64 adc1\n"
"int64 adc2\n"
"int64 adc3\n"
"int64 adc4\n"
"float64 command1\n"
"float64 command2\n"
;
  }

  static const char* value(const ::msgpkg::realVal3_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgpkg::realVal3_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.realPos1);
      stream.next(m.realPos2);
      stream.next(m.adc1);
      stream.next(m.adc2);
      stream.next(m.adc3);
      stream.next(m.adc4);
      stream.next(m.command1);
      stream.next(m.command2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct realVal3_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgpkg::realVal3_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgpkg::realVal3_<ContainerAllocator>& v)
  {
    s << indent << "realPos1: ";
    Printer<int64_t>::stream(s, indent + "  ", v.realPos1);
    s << indent << "realPos2: ";
    Printer<int64_t>::stream(s, indent + "  ", v.realPos2);
    s << indent << "adc1: ";
    Printer<int64_t>::stream(s, indent + "  ", v.adc1);
    s << indent << "adc2: ";
    Printer<int64_t>::stream(s, indent + "  ", v.adc2);
    s << indent << "adc3: ";
    Printer<int64_t>::stream(s, indent + "  ", v.adc3);
    s << indent << "adc4: ";
    Printer<int64_t>::stream(s, indent + "  ", v.adc4);
    s << indent << "command1: ";
    Printer<double>::stream(s, indent + "  ", v.command1);
    s << indent << "command2: ";
    Printer<double>::stream(s, indent + "  ", v.command2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGPKG_MESSAGE_REALVAL3_H
