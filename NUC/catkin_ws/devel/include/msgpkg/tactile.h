// Generated by gencpp from file msgpkg/tactile.msg
// DO NOT EDIT!


#ifndef MSGPKG_MESSAGE_TACTILE_H
#define MSGPKG_MESSAGE_TACTILE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msgpkg
{
template <class ContainerAllocator>
struct tactile_
{
  typedef tactile_<ContainerAllocator> Type;

  tactile_()
    : Data()  {
    }
  tactile_(const ContainerAllocator& _alloc)
    : Data(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _Data_type;
  _Data_type Data;





  typedef boost::shared_ptr< ::msgpkg::tactile_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgpkg::tactile_<ContainerAllocator> const> ConstPtr;

}; // struct tactile_

typedef ::msgpkg::tactile_<std::allocator<void> > tactile;

typedef boost::shared_ptr< ::msgpkg::tactile > tactilePtr;
typedef boost::shared_ptr< ::msgpkg::tactile const> tactileConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgpkg::tactile_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgpkg::tactile_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgpkg::tactile_<ContainerAllocator1> & lhs, const ::msgpkg::tactile_<ContainerAllocator2> & rhs)
{
  return lhs.Data == rhs.Data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgpkg::tactile_<ContainerAllocator1> & lhs, const ::msgpkg::tactile_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgpkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msgpkg::tactile_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgpkg::tactile_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgpkg::tactile_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgpkg::tactile_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgpkg::tactile_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgpkg::tactile_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgpkg::tactile_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1285f0907f1195d9fc43c8c67aef173e";
  }

  static const char* value(const ::msgpkg::tactile_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1285f0907f1195d9ULL;
  static const uint64_t static_value2 = 0xfc43c8c67aef173eULL;
};

template<class ContainerAllocator>
struct DataType< ::msgpkg::tactile_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgpkg/tactile";
  }

  static const char* value(const ::msgpkg::tactile_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgpkg::tactile_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] Data\n"
;
  }

  static const char* value(const ::msgpkg::tactile_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgpkg::tactile_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct tactile_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgpkg::tactile_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgpkg::tactile_<ContainerAllocator>& v)
  {
    s << indent << "Data[]" << std::endl;
    for (size_t i = 0; i < v.Data.size(); ++i)
    {
      s << indent << "  Data[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGPKG_MESSAGE_TACTILE_H
