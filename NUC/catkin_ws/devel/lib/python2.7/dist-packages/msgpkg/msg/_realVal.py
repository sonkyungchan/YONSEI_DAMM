# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msgpkg/realVal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class realVal(genpy.Message):
  _md5sum = "759db5aada8af296ae03ce0c58f9ddd5"
  _type = "msgpkg/realVal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 realPos
int64 motPos
float64 command
int64 adc1
int64 adc2
int64 fss
float64 par1
float64 par2
float64 par3
"""
  __slots__ = ['realPos','motPos','command','adc1','adc2','fss','par1','par2','par3']
  _slot_types = ['int64','int64','float64','int64','int64','int64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       realPos,motPos,command,adc1,adc2,fss,par1,par2,par3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(realVal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.realPos is None:
        self.realPos = 0
      if self.motPos is None:
        self.motPos = 0
      if self.command is None:
        self.command = 0.
      if self.adc1 is None:
        self.adc1 = 0
      if self.adc2 is None:
        self.adc2 = 0
      if self.fss is None:
        self.fss = 0
      if self.par1 is None:
        self.par1 = 0.
      if self.par2 is None:
        self.par2 = 0.
      if self.par3 is None:
        self.par3 = 0.
    else:
      self.realPos = 0
      self.motPos = 0
      self.command = 0.
      self.adc1 = 0
      self.adc2 = 0
      self.fss = 0
      self.par1 = 0.
      self.par2 = 0.
      self.par3 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2qd3q3d().pack(_x.realPos, _x.motPos, _x.command, _x.adc1, _x.adc2, _x.fss, _x.par1, _x.par2, _x.par3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.realPos, _x.motPos, _x.command, _x.adc1, _x.adc2, _x.fss, _x.par1, _x.par2, _x.par3,) = _get_struct_2qd3q3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2qd3q3d().pack(_x.realPos, _x.motPos, _x.command, _x.adc1, _x.adc2, _x.fss, _x.par1, _x.par2, _x.par3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.realPos, _x.motPos, _x.command, _x.adc1, _x.adc2, _x.fss, _x.par1, _x.par2, _x.par3,) = _get_struct_2qd3q3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2qd3q3d = None
def _get_struct_2qd3q3d():
    global _struct_2qd3q3d
    if _struct_2qd3q3d is None:
        _struct_2qd3q3d = struct.Struct("<2qd3q3d")
    return _struct_2qd3q3d
